1. check when a user modifies the file by
adding a false identifier with the true ones preseent
2. Check if its a valid file

Strategy:
Read the map using get_next_line
store the contents in the various strings meant for them
define the identifier in the header seperately
# define North NO
idnetifier => NO SO EA WE F C
map => all others should go here

Identifier:
use their identifier names to store them (NO ) *note the space
count the words and if more than 2, exit
split the identifier and its file name using spaces
check the identifier if it matches the original else end
loop from back and check the filename if it ends with .xpm else end

colors:
split the identifier and others using 
check the identifier if it matches the main one
The integers must be between 0 and 255, inclusive.

map:
copy all the contents of the map
any text without the identifer should be stored in the map
check thru the map and any character not the usual should exit the program

Issues
i havent handled for if the texture paths really are valid
do the file paths really open when the open function is called
if it fails, throw an error message





Undefined symbols for architecture x86_64:
  "_create_image", referenced from:
      _run_game in run_game.o
  "_import_image", referenced from:
      _load_textures in textures.o
  "_paint_image", referenced from:
      _run_game in run_game.o
      _on_keydown in event_handlers.o



in the parse_map_file function, anything not a valid identifier,
should be sent to the map file
in the is_valid_identifier, also check for the floor and ceiling colors
just so that it doesnt get parsed to the map
